{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nrequire('./Thermometer.css');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Thermometer = function (_Component) {\n  _inherits(Thermometer, _Component);\n\n  function Thermometer() {\n    _classCallCheck(this, Thermometer);\n\n    return _possibleConstructorReturn(this, (Thermometer.__proto__ || Object.getPrototypeOf(Thermometer)).apply(this, arguments));\n  }\n\n  _createClass(Thermometer, [{\n    key: 'render',\n    value: function render() {\n      this.options = this._generateOptions();\n      var theme = 'thermometer--theme-' + this.options.theme();\n      var size = 'thermometer--' + this.options.size();\n      var height = {\n        height: this.options.height + 'px'\n      };\n      var heightPercent = {\n        height: this.options.percent() + '%'\n      };\n      var heightBgColor = {\n        height: 'calc(' + this.options.height + 'px - 57px)'\n      };\n      var valstr = this.options.valstr();\n\n      this._createIntervals();\n\n      var stepIntervals = this._createIntervalsUI(this.options.intervals);\n\n      return _react2.default.createElement('div', {\n        style: height,\n        className: 'thermometer ' + size + ' ' + theme\n      }, _react2.default.createElement('div', {\n        className: 'thermometer__draw-a'\n      }), _react2.default.createElement('div', {\n        className: 'thermometer__draw-b'\n      }), _react2.default.createElement('div', {\n        className: 'thermometer__meter'\n      }, _react2.default.createElement('ul', {\n        className: 'thermometer__statistics'\n      }, stepIntervals), _react2.default.createElement('div', {\n        style: heightPercent,\n        className: 'thermometer__mercury'\n      }, _react2.default.createElement('div', {\n        className: 'thermometer__percent-current'\n      }, valstr), _react2.default.createElement('div', {\n        className: 'thermometer__mask'\n      }, _react2.default.createElement('div', {\n        className: 'thermometer__bg-color',\n        style: heightBgColor\n      })))));\n    }\n  }, {\n    key: '_generateOptions',\n    value: function _generateOptions() {\n      var _this2 = this;\n\n      return {\n        theme: function theme() {\n          return _this2.props.theme === 'light' || _this2.props.theme === 'dark' ? _this2.props.theme : 'light';\n        },\n        value: this.props.value || 0,\n        //default 0\n        max: this.props.max || 100,\n        //default 100\n        steps: this.props.steps,\n        format: this.props.format || '',\n        size: function size() {\n          return _this2.props.size === 'small' || _this2.props.size === 'normal' || _this2.props.size === 'large' ? _this2.props.size : 'normal';\n        },\n        height: this.props.height || 200,\n        //default 200\n        valstr: function valstr() {\n          return _this2.options.value + _this2.options.format;\n        },\n        percent: function percent() {\n          return _this2.options.value / _this2.options.max * 100;\n        },\n        intervals: []\n      };\n    }\n  }, {\n    key: '_createIntervals',\n    value: function _createIntervals() {\n      if (this.options.steps) {\n        for (var step = 0; step <= this.options.steps; step++) {\n          var val = (this.options.max / this.options.steps * step).toFixed(2);\n          var percent = val / this.options.max * 100;\n          var interval = {\n            percent: percent,\n            label: val + this.options.format\n          };\n          this.options.intervals.push(interval);\n        }\n      }\n    }\n  }, {\n    key: '_createIntervalsUI',\n    value: function _createIntervalsUI(intervals) {\n      return intervals.map(function (step, i) {\n        return _react2.default.createElement('li', {\n          key: i,\n          style: {\n            bottom: 'calc(' + step.percent + '% - 1px)'\n          }\n        }, step.label);\n      });\n    }\n  }]);\n\n  return Thermometer;\n}(_react.Component);\n\nexports.default = Thermometer;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}